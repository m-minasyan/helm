---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
  name: $SERVICE_NAME
spec:
  ports:
  - { port: 80, targetPort: 8200 }
  selector:
    app.kubernetes.io/name: $SERVICE_NAME
    release: "0.1"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
    release: "0.1"
  name: $SERVICE_NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME
      release: "0.1"
  serviceName: $SERVICE_NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $SERVICE_NAME
        release: "0.1"
    spec:
      containers:
      - name: $SERVICE_NAME
        env:
        - { name: PUID, value: "0" }
        - { name: TZ, value: $TZ }
        image: $REGISTRY_URI/$SERVICE_NAME:latest
        ports:
        - containerPort: 8200
        resources:
          limits:
            memory: 2048Mi
          requests:
            cpu: 200m
            memory: 512Mi
        volumeMounts:
        - mountPath: /config
          name: config
        - mountPath: /restore
          name: restore
        - mountPath: /backup/share
          name: share
        - mountPath: /backup/services
          name: backup
          readOnly: true
        - mountPath: /backup/share/gitlab
          name: gitlab
          readOnly: true
        - mountPath: /backup/home
          name: home
          readOnly: true
      imagePullSecrets:
      - name: regcred
      nodeSelector:
        service.$SERVICE_NAME: allow
      volumes:
      - name: config
        hostPath: { path: $K8S_VOLUMES_PATH/duplicati/config }
      - name: backup
        hostPath: { path: $PATH_BKP }
      - name: gitlab
        hostPath: { path: $K8S_VOLUMES_PATH/gitlab }
      - name: home
        hostPath: { path: /home }
  volumeClaimTemplates:
  - metadata:
      name: restore
    spec:
      accessModes: [ ReadWriteOnce ]
      resources:
        requests:
          storage: 8Gi
